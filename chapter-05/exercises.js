// /////////////////////////////////////////////////////////////////////////////
// flatten /////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function flatten(array) {
  //console.log(array)
  return array.reduce(function(acc, current){
    return acc.concat(current)
   
  }, [])

}

// /////////////////////////////////////////////////////////////////////////////
// loop ////////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function loop(val, tstFunc, updFunc, bdyFunc) {
  for(let i = val; tstFunc(i); i = updFunc(i) ){
    //init val as current value
    //test function recieves current value and returns true or false
    //updFunc returns updated value for next iteration

    bdyFunc(i);//bdy gets called each iteration w current value 
  
}

}

// /////////////////////////////////////////////////////////////////////////////
// every ///////////////////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function every(array, func) {
  for(var i = 0; i < array.length; i++){
    if(!func(array[i], i, array)){
      return false
    }

  }
  return true;

}

// /////////////////////////////////////////////////////////////////////////////
// dominantDirection ///////////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

function dominantDirection(string) {
  //init ltr and rtl as arrays
  let ltr = []
  let rtl = []
  
  for(var i = 0; i < string.length; i++){
    //iterate through string postively
    let script = characterScript(string.charCodeAt(i))
    //make a variable that is assigned to the result of invoking characterScript on current characters code
    
    //determine if script is not equal to null 
    if(script !== null){
      if(script.direction === 'ltr'){
        ltr.push(script)
      }else{
        rtl.push(script)
      }
    }
  }
  

if(ltr.length > rtl.length){
  return 'ltr';
}else{
  return 'rtl';
}

}

// /////////////////////////////////////////////////////////////////////////////
//  //////////////////////////////////////////////////////
// /////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    flatten,
    loop,
    every,
    dominantDirection,
  };
};