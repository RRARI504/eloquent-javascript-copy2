////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(start, end, step = start < end ?  1 : -1) {
  
  let output = []
  
  if(start === end){
    return []

  }

  if (step > 0) {
    for (var i = start; i <= end; i += step) {
      output.push(i);
    }
    
  } else if (step < 0) {
    for (var i = start; i >= end; i += step) {
      output.push(i);
    }
  }
  return output;

}

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array) {
  let add = 0
  for(var i = 0; i < array.length; i++){
    add += array[i]
  }
  return add;

}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(array) {
  output = [];

  for(var i = array.length - 1; i >= 0; i--){
    output.push(array[i])
  }
  return output;


}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array) {
  for(var i = 0; i < Math.floor(array.length / 2); i++){
    //method in JavaScript rounds a number down to the nearest 
    //integer less than or equal to the given number.
    let old = array[i]
    array[i] = array[array.length - 1 - i]
    array[array.length - 1 - i] = old

  }


}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
  let rest = null;//because we are moving from the outside in
  for(var i = array.length - 1; i >= 0; i--){
    rest = {value: array[i], rest: rest}
    //reassign rest to an object that has a value prop equal to current iteration
    //and a key created assigned to current value of rest which on first iteration is null 

  }
  return rest;

}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list, array=[]) {
  //base
  if(list.rest === null){
    array.push(list.value)
    return array;

  }

  //recursion
  array.push(list.value)

  return listToArray(list.rest, array)
 

}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(element, list) {
  //console.log(list)
  //create new list that adds element to front of input list

 return { //return a new object w value set to the 
  //the element passed in and rest set to the list.
  //made a new value pointed to the begining of an existing list
  value: element,
  rest: list
  
 }
}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, number) {
 //console.log(list)
 let node = list;//set variable to node to keep track 
 //node in list
 let count = 0;

 while(node !== null){
  //while loop will go if node exist 
  if(count === number){
    //if count or current position 
    //is equal to the number given
    return node.value
    //return value at node
  }

  //reassign current to the next node which is stores in .rest
  node = node.rest;
  count++

 }
 return undefined;


}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(x, y) {
  //check if x and y are simple datatypes
  if(typeof x !== 'object' && typeof y !== 'object'){
    return x === y
  }
  //checks if x or y is still an object
  if(typeof x !== 'object' || typeof y !== 'object'){
    return false;
    //if both values not complex return false
  }

  let xKeys = Object.keys(x)
  let yKeys = Object.keys(y)

for(let i = 0; i < xKeys.length; i++){
  if(!yKeys.includes(xKeys[i]) || !deepEqual(x[xKeys[i]], y[yKeys[i]] ) ){

    return false;
  }


}
return true;
  

}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};